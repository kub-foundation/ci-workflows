name: Build Docker Image to GCR

on:
  workflow_call:
    inputs:
      env:
        required: false
        type: string
        default: "dev"
      name:
        required: true
        type: string
      deploy_on:
        required: true
        type: string # main หรือ tag
      docker_file:
        required: false
        type: string
        default: Dockerfile
      docker_context:
        required: false
        type: string
        default: "."
    secrets:
      GCP_PROJECT_ID:
        required: true
      GCP_REGION:
        required: true
      GCP_SA_KEY:
        required: true

jobs:
  build-docker-to-gcr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker auth
        run: gcloud auth configure-docker -q

      - name: Predefined
        run: |
          export APP_DIR=${APP_DIR:-.}
          export PACKAGE_DIR=${PACKAGE_DIR:-$APP_DIR}
          export IMAGE="gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ inputs.name }}"

      - name: Copy Env
        run: cp ${PACKAGE_DIR}/envs/.env.${{ inputs.env }} ${PACKAGE_DIR}/.env || true
        continue-on-error: true

      - name: Defined Docker Tag
        run: |
          if [ "${{ inputs.deploy_on }}" = "main" ]; then
            export TAG=${GITHUB_SHA::7}
          else
            export TAG=${GITHUB_REF#refs/tags/}
          fi

      # - name: Defined Docker ARGS
      #   run: |
      #     DOCKER_BUILD_ARG_BUILD_TAG=$TAG
      #     DOCKER_BUILD_ARGS="--build-arg BUILD_ID=$TAG"
      #     DOCKER_ENVS=$(env | grep ^DOCKER_BUILD_ARG_*)
      #     for change in $DOCKER_ENVS; do
      #         set -- `echo $change | tr '=' ' '`
      #         key=$(echo $1 | sed -e "s/^DOCKER_BUILD_ARG_//")
      #         value=$2
      #         DOCKER_BUILD_ARGS="$DOCKER_BUILD_ARGS --build-arg $key=$value";
      #     done

      - name: Build and Push Docker image
        run: |
          env
          docker build \
            -t $IMAGE:$TAG \
            -t $IMAGE:latest \
            -f ${{ inputs.docker_file }} \
            ${{ inputs.docker_context }}

          docker push --all-tags $IMAGE